from openai import OpenAI, APITimeoutError, APIConnectionError
import traceback
import config

try:
    openrouter_client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=config.OPENROUTER_API_KEY,
    )
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenRouter: {e}")
    openrouter_client = None


def get_openrouter_response(model_name, user_prompt):
    """OpenRouter"""
    if not openrouter_client:
        return "‚ùå –ö–ª–∏–µ–Ω—Ç OpenRouter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."

    model_id = config.MODELS.get(model_name)
    if not model_id or model_id == "proxy":
        return f"‚ùå –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è OpenRouter."
    
    print(f"‚è≥ –ó–∞–ø—Ä–æ—Å –∫ OpenRouter ({model_id})...")

    try:
        completion = openrouter_client.chat.completions.create(
            
            # –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ config
            extra_headers={
                "HTTP-Referer": config.APP_REFERER, 
                "X-Title": config.APP_TITLE
            },
            # -------------------------
            model=model_id,
            messages=[{"role": "user", "content": user_prompt}],
            max_tokens=1000,
            timeout=45,
        )
        return completion.choices[0].message.content
    except APITimeoutError:
        return f"‚è∞ {model_name}: –¢–∞–π–º–∞—É—Ç"
    except APIConnectionError:
        return f"üîå {model_name}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter"
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê OpenRouter: {e}")
        traceback.print_exc()
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."