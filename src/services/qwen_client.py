import requests
import json
import traceback
import config


def log_response(data):
    """–õ–æ–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
    try:
        if isinstance(data, str):
            data = json.loads(data)
        
        content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        model = data.get("model", "unknown")
        tokens = data.get("usage", {})
        
        # –ü—Ä–∏ –ø—É—Å—Ç–æ–º –±–æ–ª—å–µ—à –∏–Ω—Ñ—ã
        if not content or content.strip() == "":
            print(f"\n{'='*60}")
            print(f"‚ö†Ô∏è –ü–£–°–¢–û–ô –û–¢–í–ï–¢ –û–¢ {model}")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {tokens.get('prompt_tokens', 0)} ‚Üí {tokens.get('completion_tokens', 0)}")
            print(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=2)}")
            print(f"{'='*60}\n")
        else:
            print(f"\n{'='*60}")
            print(f"ü§ñ {model}")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {tokens.get('prompt_tokens', 0)} ‚Üí {tokens.get('completion_tokens', 0)}")
            print(f"üìù {content[:100]}...")
            print(f"{'='*60}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def validate_image_url(url):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
        if not url or not url.startswith('http'):
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (HEAD –∑–∞–ø—Ä–æ—Å)
        response = requests.head(url, timeout=5, allow_redirects=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = response.headers.get('Content-Type', '').lower()
        if 'image' not in content_type:
            return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {content_type}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        content_length = response.headers.get('Content-Length')
        if content_length:
            size_mb = int(content_length) / (1024 * 1024)
            if size_mb > 20:  # Qwen –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 20MB
                return False, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {size_mb:.1f} MB"
        
        return True, None
        
    except requests.exceptions.Timeout:
        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"


def get_qwen_response_with_image(user_prompt, image_url, chat_id=None, parent_id=None):
    """Qwen —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        is_valid, error_msg = validate_image_url(image_url)
        if not is_valid:
            print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {error_msg}")
            return f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {error_msg}", None, None
        
        payload = {
            "message": [
                {"type": "text", "text": user_prompt or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"},
                {"type": "image", "image": image_url}
            ],
            "model": "qwen3-vl-plus",
        }
        
        if chat_id:
            payload["chatId"] = chat_id
        if parent_id:
            payload["parentId"] = parent_id
        
        print(f"‚è≥ –ó–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º... ({config.QWEN_PROXY_URL})")
        print(f"üìé URL: {image_url[:80]}...")
        
        response = requests.post(
            f"{config.QWEN_PROXY_URL}/api/chat", 
            json=payload, 
            timeout=360
        )
        response.raise_for_status()
        data = response.json()
        
        # –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê
        if "choices" not in data or not data["choices"]:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, ensure_ascii=False)}")
            return "‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, None
        
        log_response(data)
        
        # –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê –° FALLBACK
        content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π
        if not content or content.strip() == "":
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç API")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º finish_reason
            finish_reason = data.get("choices", [{}])[0].get("finish_reason", "unknown")
            print(f"   Finish reason: {finish_reason}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if finish_reason == "content_filter":
                content = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            elif finish_reason == "length":
                content = "‚ö†Ô∏è –û—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            else:
                content = (
                    "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. \n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞."
                )
        
        # –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• –î–õ–Ø –ö–û–ù–¢–ï–ö–°–¢–ê
        new_chat_id = data.get("chatId") or data.get("chat_id")
        new_parent_id = (
            data.get("parentId") or 
            data.get("parent_id") or 
            data.get("response_id") or
            data.get("id")
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. Chat ID: {new_chat_id}, Parent ID: {new_parent_id}")
        
        return content, new_chat_id, new_parent_id
        
    except requests.exceptions.Timeout:
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, None
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
        if e.response:
            print(f"   –ö–æ–¥: {e.response.status_code}")
            print(f"   –¢–µ–ª–æ: {e.response.text[:500]}")
        return f"‚ùå –û—à–∏–±–∫–∞ API (–∫–æ–¥ {e.response.status_code if e.response else 'N/A'}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä.", None, None
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Qwen (Image): {e}")
        traceback.print_exc()
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, None


def get_qwen_response_text_only(user_prompt, chat_id=None, parent_id=None):
    """Qwen —Ç–µ–∫—Å—Ç"""
    try:
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
        if not user_prompt or user_prompt.strip() == "":
            return "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!", None, None
        
        payload = {
            "message": user_prompt, 
            "model": "qwen3-max"
        }
        
        if chat_id:
            payload["chatId"] = chat_id
        if parent_id:
            payload["parentId"] = parent_id
            
        print(f"‚è≥ –ó–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç)... ({config.QWEN_PROXY_URL})")
        print(f"   üí¨ –¢–µ–∫—Å—Ç: {user_prompt[:60]}...")

        response = requests.post(
            f"{config.QWEN_PROXY_URL}/api/chat", 
            json=payload, 
            timeout=90
        )
        response.raise_for_status()
        data = response.json()
        
        # –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´
        if "choices" not in data or not data["choices"]:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
            return "‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.", None, None
        
        log_response(data)
        
        # –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –° –ü–†–û–í–ï–†–ö–û–ô
        content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        
        if not content or content.strip() == "":
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            content = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        
        new_chat_id = data.get("chatId") or data.get("chat_id")
        new_parent_id = (
            data.get("parentId") or 
            data.get("parent_id") or 
            data.get("response_id") or
            data.get("id")
        )
        
        return content, new_chat_id, new_parent_id
        
    except requests.exceptions.Timeout:
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return "‚è∞ –¢–∞–π–º–∞—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, None
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ API (–∫–æ–¥ {e.response.status_code if e.response else 'N/A'}).", None, None
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Qwen (Text): {e}")
        traceback.print_exc()
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, None


# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò

def test_qwen_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qwen API"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qwen API...\n")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        content, chat_id, parent_id = get_qwen_response_text_only("–°–∫–∞–∂–∏ '–ø—Ä–∏–≤–µ—Ç'")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {content[:50]}...")
        print(f"   Chat ID: {chat_id}, Parent ID: {parent_id}\n")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
        response = requests.get(f"{config.QWEN_PROXY_URL}/api", timeout=5)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}\n")
        
        print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –º–æ–¥—É–ª—è
    test_qwen_connection()