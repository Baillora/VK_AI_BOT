import vk_api
from vk_api.bot_longpoll import VkBotLongPoll
from threading import Thread, Event
import requests
import os
import tempfile
import time

import config
from src.utils.text_helpers import split_message, format_math_response
from src.utils.pdf_generator import create_pdf_with_formulas, REPORTLAB_AVAILABLE
from src.utils.image_generator import create_full_answer_image

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK ---
# –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç—É—Ç
try:
    vk_session = vk_api.VkApi(token=config.VK_TOKEN)
    vk = vk_session.get_api()
    longpoll = VkBotLongPoll(vk_session, config.GROUP_ID)
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK API. {e}")
    exit()

# –ö–õ–ê–°–°: –ö–û–ù–¢–†–û–õ–õ–ï–† –°–¢–ê–¢–£–°–ê –ù–ê–ë–û–†–ê –¢–ï–ö–°–¢–ê (TypingStatusController)
class TypingStatusController:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ '–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...'"""
    def __init__(self, peer_id: int):
        self.peer_id = peer_id
        self._stop_event = Event()
        self._thread = None
        
    def _run_typing_loop(self):
        """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 7 —Å–µ–∫ (10 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç –í–ö)
        while not self._stop_event.is_set():
            try:
                # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç vk
                vk.messages.setActivity(
                    peer_id=self.peer_id,
                    type='typing' 
                )
                # –ñ–¥–µ–º 7 —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è _stop_event —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ü–∏–∫–ª –ø—Ä–µ—Ä–≤–µ—Ç—Å—è.
                self._stop_event.wait(timeout=7) 
                
            except Exception as e:
                # –ï—Å–ª–∏ —Å–±–æ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {self.peer_id}: {e}")
                break

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        if self._thread is None or not self._thread.is_alive():
            self._stop_event.clear()
            self._thread = Thread(target=self._run_typing_loop)
            self._thread.start()
            print(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {self.peer_id}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        if self._thread and self._thread.is_alive():
            self._stop_event.set()
            self._thread.join(timeout=8) # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            print(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {self.peer_id}")

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò VK

def get_longpoll_listener():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç longpoll listener"""
    return longpoll

def upload_photo_to_vk(photo_path, user_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ"""
    try:
        upload_url = vk.photos.getMessagesUploadServer(peer_id=user_id)['upload_url']
        
        with open(photo_path, 'rb') as f:
            response = requests.post(upload_url, files={'photo': f}).json()
        
        photo = vk.photos.saveMessagesPhoto(
            photo=response['photo'],
            server=response['server'],
            hash=response['hash']
        )[0]
        
        return f"photo{photo['owner_id']}_{photo['id']}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None

def upload_doc_to_vk(doc_path, user_id, title="document.pdf"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞: {title}")
        
        upload_data = vk.docs.getMessagesUploadServer(type='doc', peer_id=user_id)
        if not upload_data or 'upload_url' not in upload_data:
            return None
        
        upload_url = upload_data['upload_url']
        
        with open(doc_path, 'rb') as f:
            response = requests.post(upload_url, files={'file': f})
        
        if response.status_code != 200:
            print(f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return None
        
        upload_result = response.json()
        if 'file' not in upload_result:
            return None
        
        save_result = vk.docs.save(file=upload_result['file'], title=title)
        
        if isinstance(save_result, list):
            doc = save_result[0] if save_result else None
        elif isinstance(save_result, dict):
            doc = save_result.get('doc', save_result)
        else:
            return None
        
        if doc and 'owner_id' in doc and 'id' in doc:
            return f"doc{doc['owner_id']}_{doc['id']}"
        
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ doc: {e}")
        return None

def send_message(user_id, text, attachment=None, mode="math"):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º LaTeX -> Unicode).
    mode –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ, –±—É–¥–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ—á–∏—â–∞—Ç—å—Å—è –æ—Ç LaTeX.
    """
    try:
        # –í —Ä–µ–∂–∏–º–µ 'math' —á–∏—Å—Ç–∏–º LaTeX, –≤ 'code' –∏ 'raw' - –Ω–µ—Ç
        if mode == "math":
            formatted = format_math_response(text)
        else:
            formatted = text
            
        parts = split_message(formatted)
        
        for i, part in enumerate(parts):
            if len(parts) > 1:
                part = f"[–ß–∞—Å—Ç—å {i+1}/{len(parts)}]\n\n" + part
            
            # –í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é
            att = attachment if i == 0 else None
            vk.messages.send(user_id=user_id, message=part, attachment=att, random_id=0)
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            vk.messages.send(user_id=user_id, message=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. {text[:1000]}", random_id=0)
        except:
            pass # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è 

def send_as_format(user_id, text, format_type="text", mode="math"):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (text, image, pdf).
    'mode' (math, code, raw) –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ send_message.
    """
    
    # /code –∏ /raw –≤—Å–µ–≥–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if mode == "code" or mode == "raw":
        send_message(user_id, text, mode=mode)
        return
    
    # /math (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç format_type
    if format_type == "image":
        tmp_file = None
        try:
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                tmp_file = tmp.name
            
            print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º...")
            
            if create_full_answer_image(text, tmp_file):
                attachment = upload_photo_to_vk(tmp_file, user_id)
                if attachment:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ 'raw', —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å LaTeX
                    send_message(user_id, "üìê –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏:", attachment, mode="raw")
                    # –ê —Å–∞–º —Ç–µ–∫—Å—Ç (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è) - –∫–∞–∫ 'math' (–æ–Ω –æ—á–∏—Å—Ç–∏—Ç LaTeX)
                    send_message(user_id, text, mode="math")
                else:
                    send_message(user_id, text, mode="math")
            else:
                send_message(user_id, text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", mode="math")
        finally:
            if tmp_file and os.path.exists(tmp_file):
                try:
                    time.sleep(0.5)
                    os.unlink(tmp_file)
                except:
                    pass
    
    elif format_type == "pdf":
        if not REPORTLAB_AVAILABLE:
            send_message(user_id, text + "\n\n‚ö†Ô∏è –ú–æ–¥—É–ª—å PDF (reportlab) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", mode="math")
            return
        
        tmp_file = None
        try:
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp:
                tmp_file = tmp.name
            
            print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF...")
            
            if create_pdf_with_formulas(text, tmp_file):
                attachment = upload_doc_to_vk(tmp_file, user_id, "–†–µ—à–µ–Ω–∏–µ.pdf")
                if attachment:
                    send_message(user_id, "üìÑ PDF —Å —Ä–µ—à–µ–Ω–∏–µ–º", attachment, mode="raw")
                    send_message(user_id, text, mode="math")
                else:
                    send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF\n\n" + text, mode="math")
            else:
                send_message(user_id, text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF", mode="math")
        finally:
            if tmp_file and os.path.exists(tmp_file):
                try:
                    time.sleep(0.5)
                    os.unlink(tmp_file)
                except:
                    pass
    
    else:
        # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        send_message(user_id, text, mode="math")