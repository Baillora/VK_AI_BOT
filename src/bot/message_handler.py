import traceback
from src.bot.vk_client import send_message, send_as_format, TypingStatusController
from src.services import prompt_builder, qwen_client, openrouter_client


def handle_message(msg_obj, user_id, state):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã) —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    text = msg_obj.get("text", "").strip()
    # –í LongPoll Bot API –∏–º–µ–µ—Ç –ø–æ–ª–µ 'message'
    msg_data = msg_obj.get("message", msg_obj) #  msg_obj –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è
    attachments = msg_data.get("attachments", [])
    
    # --- –°–ë–†–û–° –ö–û–ù–¢–ï–ö–°–¢–ê ---
    # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ—Ç reply_message), —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Qwen.
    if 'reply_message' not in msg_data:
        state.clear_user_chat(user_id) 
        
    # --- 1 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π ---
    image_url = None
    has_unsupported_attachments = False
    if attachments:
        for att in attachments:
            if att["type"] == "photo":
                sizes = att["photo"]["sizes"]
                largest = max(sizes, key=lambda s: s["width"] * s["height"])
                image_url = largest["url"]
                break # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞ —Ç–∞–∫
            else:
                # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∏–ø (doc, video, etc.)
                has_unsupported_attachments = True
        
        if has_unsupported_attachments and not image_url:
            send_message(user_id, "‚ö†Ô∏è –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏* (jpg, png). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã.", mode="raw")
            return

    # --- 2 –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    current_model = state.get_user_model(user_id)
    current_mode = state.get_mode(user_id)
    current_format = state.get_format(user_id)
    chat_context = state.get_user_chat(user_id)
    chat_id, parent_id = (chat_context[0], chat_context[1]) if chat_context else (None, None)

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Qwen
    if image_url and current_model != "qwen":
        send_message(user_id, f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {current_model}, –æ–Ω–∞ –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ Qwen.", mode="raw")
        current_model = "qwen"

    # --- 3 –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ---
    final_prompt = prompt_builder.get_final_prompt(text, current_mode, image_url)

    # --- 4 –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ---
    model_name = current_model.upper()
    mode_name = current_mode.upper()
    image_status = " üì∏ (—Å —Ñ–æ—Ç–æ)" if image_url else ""

    send_message(user_id, 
        f"ü§ñ {model_name} | –†–µ–∂–∏–º: {mode_name}{image_status} | –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É...", 
        mode="raw"
    )
    print(f"-> üß† {current_model} | {current_mode}{image_status} –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.")
    
    # –ó–ê–ü–£–°–ö –ö–û–ù–¢–†–û–õ–õ–ï–†–ê
    typing_controller = TypingStatusController(user_id)
    typing_controller.start()
    
    response_text = ""
    new_chat_id, new_parent_id = None, None
    
    try:
        # --- 5 –í—ã–∑–æ–≤ AI ---
        if current_model == "qwen":
            if image_url:
                response_text, new_chat_id, new_parent_id = qwen_client.get_qwen_response_with_image(
                    final_prompt, image_url, chat_id, parent_id
                )
            else:
                response_text, new_chat_id, new_parent_id = qwen_client.get_qwen_response_text_only(
                    final_prompt, chat_id, parent_id
                )
            
            # –û–±–Ω–æ–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ qwen
            if new_chat_id:
                state.update_user_chat(user_id, new_chat_id, new_parent_id)
                
        else:
            # OpenRouter (Kimi, Deepseek)
            response_text = openrouter_client.get_openrouter_response(
                current_model, final_prompt
            )

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê AI: {e}")
        traceback.print_exc()
        send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", mode="raw")
        raise e # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ finally

    finally:
        # –û–°–¢–ê–ù–û–í–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–ê –ü–†–û–ò–ó–í–û–î–ò–¢–°–Ø –ó–î–ï–°–¨
        typing_controller.stop()

    # --- 6 –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    if response_text:
        send_as_format(user_id, response_text, current_format, current_mode)
    else:
        send_message(user_id, "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI.", mode="raw")